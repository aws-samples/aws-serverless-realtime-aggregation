# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "lucas.rettenmeier"
Description: "CloudFormation template for stateful, serverless aggregation pipeline in the AWS cloud."
Resources:

  # Kinesis Datastream
  KinesisStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      Name: "StatefulRiskDataStream"
      RetentionPeriodHours: 24
      StreamModeDetails:
          StreamMode: "ON_DEMAND"
      StreamEncryption:
          EncryptionType: "KMS"
          KeyId: "alias/aws/kinesis"
          
  # DynamoDB Tables
  StateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions: 
        - AttributeName: "id"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "StatefulStateTable"
      KeySchema: 
        - AttributeName: "id"
          KeyType: "HASH"
      StreamSpecification: 
        StreamViewType: "NEW_AND_OLD_IMAGES"

  ReduceTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions: 
        - AttributeName: "MessageHash"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "StatefulReduceTable"
      KeySchema: 
        - AttributeName: "MessageHash"
          KeyType: "HASH"
      StreamSpecification: 
        StreamViewType: "NEW_AND_OLD_IMAGES"

  AggregateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions: 
        - AttributeName: "Identifier"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "StatefulAggregateTable"
      KeySchema: 
        - AttributeName: "Identifier"
          KeyType: "HASH"

  # Lambda Functions
  StateLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: StateLambdaPolicy
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event,context):
            return
      Description: ""
      FunctionName: "StatefulStateLambda"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/StatefulStateLambdaRole"
      Runtime: "python3.8"
      Timeout: 180
      TracingConfig: 
        Mode: "PassThrough"

  MapLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: MapLambdaPolicy
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event,context):
            return
      Description: ""
      FunctionName: "StatefulMapLambda"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/StatefulMapLambdaRole"
      Runtime: "python3.8"
      Timeout: 60
      TracingConfig: 
        Mode: "PassThrough"

  ReduceLambda:
    Type: "AWS::Lambda::Function"
    DependsOn: ReduceLambdaPolicy
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event,context):
            return
      Description: ""
      FunctionName: "StatefulReduceLambda"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/StatefulReduceLambdaRole"
      Runtime: "python3.8"
      Timeout: 30
      TracingConfig: 
        Mode: "PassThrough"
      ReservedConcurrentExecutions: 1

  # IAM Roles and Policies
  StateLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "StatefulStateLambdaRole"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      Description: "Role with specifically needed permissions for StateLambda."

  StateLambdaPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ReadFromKinesisStream",
              "Effect": "Allow",
              "Action": [
                "kinesis:DescribeStream",
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:ListStreams",
                "kinesis:ListShards"
              ],
              "Resource": "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisStream}"
            },
            {
              "Sid": "CreateCloudwatchLogGroup",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
            },
            {
              "Sid": "WriteToCloudwatchLogGroup",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/StatefulStateLambda:*"
            },
            {
              "Sid": "WriteToDynamoDB",
              "Effect": "Allow",
              "Action": [
                "dynamodb:UpdateItem"
              ],
              "Resource": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${StateTable}"
            }
          ]
        }
      Roles: 
        - !Ref StateLambdaRole
      ManagedPolicyName: "StatefulStateLambdaPolicy"

  MapLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "StatefulMapLambdaRole"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      Description: "Role with the specific permissions of the MapLambda Function."

  MapLambdaPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ReadFromDynamoDBStream",
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:ListStreams"
              ],
              "Resource": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${StateTable}/stream/*"
            },
            {
              "Sid": "CreateCloudwatchLogGroup",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
            },
            {
              "Sid": "WriteToCloudwatchLogGroup",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/StatefulMapLambda:*"
            },
            {
              "Sid": "WriteToDynamoDBTable",
              "Effect": "Allow",
              "Action": "dynamodb:PutItem",
              "Resource": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ReduceTable}"
            }
          ]
        }
      Roles: 
        - !Ref MapLambdaRole
      ManagedPolicyName: "StatefulMapLambdaPolicy"

  ReduceLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "StatefulReduceLambdaRole"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      Description: "Role with specific permissions for ReduceLambda Function."

  ReduceLambdaPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ReadFromDynamoDBStream",
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:ListStreams"
              ],
              "Resource": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ReduceTable}/stream/*"
            },
            {
              "Sid": "CreateCloudwatchLogGroup",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
            },
            {
              "Sid": "WriteToCloudwatchLogGroup",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/StatefulReduceLambda:*"
            },
            {
              "Sid": "WriteToDynamoDBTable",
              "Effect": "Allow",
              "Action": [
                "dynamodb:TransactWriteItems",
                "dynamodb:UpdateItem"
              ],
              "Resource": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AggregateTable}"
            }
          ]
        }
      Roles: 
        - !Ref ReduceLambdaRole
      ManagedPolicyName: "StatefulReduceLambdaPolicy"

  # Lambda Event Source Mappings
  StateLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 100
      EventSourceArn: !GetAtt KinesisStream.Arn
      FunctionName: !GetAtt StateLambda.Arn
      Enabled: true
      MaximumBatchingWindowInSeconds: 0
      ParallelizationFactor: 10
      MaximumRecordAgeInSeconds: -1
      BisectBatchOnFunctionError: false
      MaximumRetryAttempts: -1
      TumblingWindowInSeconds: 0
      StartingPosition: 'LATEST'

  MapLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 10000
      EventSourceArn: !GetAtt StateTable.StreamArn
      FunctionName: !GetAtt MapLambda.Arn
      Enabled: true
      MaximumBatchingWindowInSeconds: 3
      ParallelizationFactor: 1
      MaximumRecordAgeInSeconds: -1
      BisectBatchOnFunctionError: false
      MaximumRetryAttempts: -1
      TumblingWindowInSeconds: 0
      StartingPosition: 'LATEST'

  ReduceLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1000
      EventSourceArn: !GetAtt ReduceTable.StreamArn
      FunctionName: !GetAtt ReduceLambda.Arn
      Enabled: true
      MaximumBatchingWindowInSeconds: 0
      ParallelizationFactor: 1
      MaximumRecordAgeInSeconds: -1
      BisectBatchOnFunctionError: false
      MaximumRetryAttempts: -1
      TumblingWindowInSeconds: 0
      StartingPosition: 'LATEST'
  
  # Cloud9 Instance
  Cloud9EnvironmentEC2:
    Type: "AWS::Cloud9::EnvironmentEC2"
    Properties:
      Name: "StatefulDataProducer"
      Description: "Cloud9Instance"
      ImageId: "ubuntu-18.04-x86_64"
      InstanceType: "m5.large"
      Repositories:
        - PathComponent: "/ServerlessAggregation"
          RepositoryUrl: "https://github.com/aws-samples/aws-serverless-realtime-aggregation"
